apiVersion: apps/v1
kind: Deployment
metadata:
  name: '$PROJECT_NAME'
  namespace: '$NAMESPACE'
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: '$PROJECT_NAME'
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'true'
      labels:
        app: '$PROJECT_NAME'
        version: '$APP_VERSION'
    spec:
      # initContainers:
      #   - name: migrations
      #     envFrom:
      #       - secretRef:
      #           name: '$PROJECT_NAME'
      #           optional: false
      #     image: '$DOCKER_IMAGE'
      #     imagePullPolicy: Always
      #     command: ['/bin/sh']
      #     args: ['-c', 'npm run migration:latest']
      containers:
        - envFrom:
            - secretRef:
                name: '$PROJECT_NAME'
                optional: false
            - secretRef:
                name: 'apm-default'
                optional: true
          image: '$DOCKER_IMAGE'
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 60
            successThreshold: 1
            tcpSocket:
              port: $SERVICEPORT
            timeoutSeconds: 60
          name: '$PROJECT_NAME'
          ports:
            - name: http
              containerPort: $SERVICEPORT
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: {}
            privileged: false
            procMount: Default
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
